Option Explicit

Public ReconciliationKey As String
Public GL_Datasheet As Worksheet


Sub Activate_GL_Recon()

Tax_GL_Recon.Show


End Sub


' ==============================================================================
' README: GL_Reconciliation Script
' ==============================================================================
'
' Overview:
' --------
' This script, named `GL_Reconciliation`, facilitates the automation of the
' General Ledger (GL) reconciliation process with Accounts Receivable (AR) data.
' The script's primary functions are:
'
' 1. Connect to an ERP system's backend to fetch data.
' 2. Populate Excel worksheets with SQL queries' results.
' 3. Dynamically determine data ranges based on the content retrieved.
' 4. Reference specific data ranges for comparison and reconciliation tasks.
' 5. Dynamically create SQL queries based on user input from a userform.
' 6. Establish connections to the ERP system using ODBC.
' 7. Populate Excel worksheets with fetched data.
' 8. Define and manipulate data ranges within Excel for reconciliation.
' 9. Generate General Journal Entries (GJE) for specific reconciliations.
'
' Key Variables:
' -------------
' - GL_StartDate, GL_EndDate: Hold SQL query date information.
' - ODBC_Connection, ODBC_RecordSet: Objects for database connectivity.
' - GL_Datasheet, AR_InvoiceHeader: Excel worksheets to store data.
' - Sage_GL_LastRow, Sage_GL_LastCol: Determine dimensions of datasets.
' - Sage_GL_PostingDate, Sage_GL_DebitAmt, etc.: Range references for data comparison.
'
' Usage:
' -----
' To use this script, ensure that:
' 1. Your ERP backend is accessible and the ODBC connection string is correct.
' 2. The Excel environment is set up with the necessary worksheets and formats.
' 3. Necessary permissions for database operations are granted.
'
' Caution:
' -------
' Be cautious about the ODBC_Connection_String. Ensure that the server and
' directory details are correct. Misconfiguration might lead to data retrieval
' from unintended places or cause connection errors.
'
' ==============================================================================
' End of README
' =============


Sub GL_Reconciliation()

' Variables to Hold SQL Querry Date Information
Dim GL_StartDate As String
Dim GL_EndDate As String


' Objects to connect to ERP System Back End
Dim ODBC_Connection_String As String
Dim ODBC_Connection As ADODB.connection
Dim ODBC_RecordSet As ADODB.Recordset
Dim ODBC_RecordSet2 As ADODB.Recordset

'Excel Worksheets to Hold Data from SQL Querries

Dim AR_InvoiceHeader As Worksheet

'Excel Workbook Object to reference in Functions/Operations
Dim GL_Reconbook As Workbook


'Variables to Define the dimensions of the data sets
Dim Sage_GL_LastRow As Double
Dim Sage_GL_LastCol As Double

Dim Sage_AR_LastRow As Double
Dim Sage_AR_LastCol As Double

'Objects to hold range references for comparison between sub ledger and general ledger

Dim Sage_GL_PostingDate As Range
Dim Sage_GL_DebitAmt As Range
Dim Sage_GL_CreditAmt As Range
Dim Sage_GL_RegisterNo As Range
Dim Sage_GL_DocumentNo As Range
Dim Sage_GL_PostingComment As Range
Dim Sage_GL_CustNo As Range
Dim Sage_GL_SourceJournal As Range
Dim Sage_AR_InvoiceNo As Range
Dim Sage_AR_CustNo As Range
Dim Sage_AR_TransactionDate As Range
Dim Sage_AR_Tax As Range
Dim Sage_AR_RegisterNo As Range
Dim Sage_AR_ShipToState As Range

'Objects to store SQL Querry information
Dim GL_Posting_SQL As String
Dim AR_HistoryHeader_SQL As String


'Define Loop Variables
Dim i As Long



Dim GL_Data_Array As Variant
Dim AR_Data_Array As Variant





'Define the GL_Recon Workbook as the Open Blank Workbook
Set GL_Reconbook = ActiveWorkbook

'Add a Worksheet to Store data downloaded from the ERP General Ledger Table
Set GL_Datasheet = GL_Reconbook.Sheets.Add

'Rename the Worksheet to the GL Account Number and dynamically with the date of the Period being reconciled:
GL_Datasheet.Name = "GL 24300-00 " & Format(Tax_GL_Recon.StartDate.Value, "YYYY-MM")

'Add a Worksheet to Store data downloaded from the ERP AR Invoice History Table (Home of State Specific Information)
Set AR_InvoiceHeader = GL_Reconbook.Sheets.Add

'Rename the Worksheet to the GL Account Number an dynamically with the date of the Period being reconciled:
AR_InvoiceHeader.Name = "AR History " & Format(Tax_GL_Recon.StartDate.Value, "yyyy-mm")

'Dynammically define GL Data SQL Querry for GL Data based on information inputed into GL_Recon userform upon code execution

GL_Posting_SQL = "SELECT * From GL_DetailPosting WHERE Accountkey = " & ReconciliationKey & " AND Postingdate >= {d'" & Format(Tax_GL_Recon.StartDate.Value, "yyyy-mm-dd") & "'} AND Postingdate <= {d'" & Format(Tax_GL_Recon.EndDate.Value, "yyyy-mm-dd") & "'}"

'Dynammically define Accounts Recieveable Data SQL Querry for AR Data based on information inputed into GL_Recon userform upon code execution

AR_HistoryHeader_SQL = "SELECT * FROM AR_InvoiceHistoryHeader Where transactiondate >= {d'" & Format(Tax_GL_Recon.StartDate.Value, "yyyy-mm-dd") & "'} AND Transactiondate <={d'" & Format(Tax_GL_Recon.EndDate.Value, "yyyy-mm-dd") & "'} AND InvoiceType <> 'XD'"

' Define the type of database connection used in the ODBC data extraction functions from the ERP

ODBC_Connection_String = "DRIVER={MAS 90 4.0 ODBC Driver};Description=MAS 90 4.0 ODBC Driver;Directory=\\fot00erp\Sage100_2020\MAS90;Prefix=\\fot00erp\Sage100_2020\MAS90\SY\, \\fot00erp\Sage100_2020\MAS90\==\;ViewDLL=\\fot00erp\Sage100_2020\MAS90\HOME;LogFile=\PVXODBC.LOG;CacheSize=4;DirtyReads=1;BurstMode=1;StripTrailingSpaces=1;SERVER=NotTheServer"

' Open a new database connection based on the defined database connection string
Set ODBC_Connection = New ADODB.connection
ODBC_Connection.Open ODBC_Connection_String

' Open a new Record Set querrying the database with the GL Data SQL Querry
Set ODBC_RecordSet = New ADODB.Recordset
ODBC_RecordSet.Open GL_Posting_SQL, ODBC_Connection

'Populate the GL Data Worksheet with the data querried from the system:
With GL_Datasheet.QueryTables.Add( _
connection:=ODBC_RecordSet, _
Destination:=GL_Datasheet.Range("A1"))

    .Name = "GL Details " & Format(Tax_GL_Recon.StartDate.Value, "yyyy-mm")
    .FieldNames = True
    .RowNumbers = False
    .FillAdjacentFormulas = False
    .PreserveFormatting = True
    .RefreshOnFileOpen = False
    .BackgroundQuery = True
    .RefreshStyle = xlInsertDeleteCells
    .SavePassword = True
    .SaveData = True
    .AdjustColumnWidth = True
    .RefreshPeriod = 0
    .PreserveColumnInfo = True
    .Refresh BackgroundQuery:=False
    
End With
ODBC_RecordSet.Close

'Open a new Record Set querrying the database with the AR Data SQL Querry

Set ODBC_RecordSet2 = New ADODB.Recordset
ODBC_RecordSet2.Open AR_HistoryHeader_SQL, ODBC_Connection

'Populate the AR History worksheet with the data querried from the system:

With AR_InvoiceHeader.QueryTables.Add( _
connection:=ODBC_RecordSet2, _
Destination:=AR_InvoiceHeader.Range("A1"))

    .Name = "AR Invoice Details " & Format(Tax_GL_Recon.StartDate.Value, "yyyy-mm")
    .FieldNames = True
    .RowNumbers = False
    .FillAdjacentFormulas = False
    .PreserveFormatting = True
    .RefreshOnFileOpen = False
    .BackgroundQuery = True
    .RefreshStyle = xlInsertDeleteCells
    .SavePassword = True
    .SaveData = True
    .AdjustColumnWidth = True
    .RefreshPeriod = 0
    .PreserveColumnInfo = True
    .Refresh
    
End With
ODBC_RecordSet2.Close

'Close the Database Connection:
ODBC_Connection.Close


'Define the Ending points of the GL Data extracted from the system:

Sage_GL_LastRow = GL_Datasheet.Cells(Rows.Count, 1).End(xlUp).row
Sage_GL_LastCol = WorksheetFunction.CountA(GL_Datasheet.Range("1:1"))

'Define the Ending Points of the AR Data extracted from the system:

Sage_AR_LastRow = AR_InvoiceHeader.Cells(Rows.Count, 1).End(xlUp).row
Sage_AR_LastCol = WorksheetFunction.CountA(AR_InvoiceHeader.Range("1:1"))

'Define the various range objects to reference in data interpetation from the AR History Sheet:

Set Sage_AR_InvoiceNo = AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(1, AR_InvoiceHeader.Cells.Find("InvoiceNo", MatchCase:=True, LookIn:=xlValues, lookat:=xlWhole).Column), AR_InvoiceHeader.Cells(Sage_AR_LastRow, AR_InvoiceHeader.Cells.Find("InvoiceNo", MatchCase:=True, LookIn:=xlValues, lookat:=xlWhole).Column))
Set Sage_AR_TransactionDate = AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(1, AR_InvoiceHeader.Cells.Find("TransactionDate").Column), AR_InvoiceHeader.Cells(Sage_AR_LastRow, AR_InvoiceHeader.Cells.Find("TransactionDate").Column))
Set Sage_AR_Tax = AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(1, AR_InvoiceHeader.Cells.Find("SalesTaxAmt").Column), AR_InvoiceHeader.Cells(Sage_AR_LastRow, AR_InvoiceHeader.Cells.Find("SalesTaxAmt").Column))
Set Sage_AR_RegisterNo = AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(1, AR_InvoiceHeader.Cells.Find("JournalNoGLBatchNo").Column), AR_InvoiceHeader.Cells(Sage_AR_LastRow, AR_InvoiceHeader.Cells.Find("JournalNoGLBatchNo").Column))
Set Sage_AR_CustNo = AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(1, AR_InvoiceHeader.Cells.Find("CustomerNo").Column), AR_InvoiceHeader.Cells(Sage_AR_LastRow, AR_InvoiceHeader.Cells.Find("CustomerNo").Column))
Set Sage_AR_ShipToState = AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(1, AR_InvoiceHeader.Cells.Find("ShipToState").Column), AR_InvoiceHeader.Cells(Sage_AR_LastRow, AR_InvoiceHeader.Cells.Find("ShipToState").Column))

'Define the various range objects to reference in data interpetation from the GL History Sheet:
Set Sage_GL_PostingDate = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("PostingDate").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("PostingDate").Column))
Set Sage_GL_DebitAmt = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("DebitAmount").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("DebitAmount").Column))
Set Sage_GL_CreditAmt = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("CreditAmount").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("CreditAmount").Column))
Set Sage_GL_RegisterNo = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("JournalRegisterNo").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("JournalRegisterNo").Column))
Set Sage_GL_DocumentNo = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("DocumentNo").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("DocumentNo").Column))
Set Sage_GL_PostingComment = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("PostingComment").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("PostingComment").Column))
Set Sage_GL_CustNo = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("UDF_AR_CR_CUSTOMER_NO").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("UDF_AR_CR_CUSTOMER_NO").Column))
Set Sage_GL_SourceJournal = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells.Find("SourceJournal").Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells.Find("SourceJournal").Column))

Dim TesString As String
' Add three column headers to the GL Data set for State and Amount, and Type
GL_Datasheet.Cells(1, Sage_GL_LastCol + 1).Value = "State"
GL_Datasheet.Cells(1, Sage_GL_LastCol + 1).Font.Bold = True

GL_Datasheet.Cells(1, Sage_GL_LastCol + 2).Value = "Amount"
GL_Datasheet.Cells(1, Sage_GL_LastCol + 2).Font.Bold = True

GL_Datasheet.Cells(1, Sage_GL_LastCol + 3).Value = "Type"
GL_Datasheet.Cells(1, Sage_GL_LastCol + 3).Font.Bold = True

GL_Datasheet.Cells(1, Sage_GL_LastCol + 4).Value = "Tripple-Key"
GL_Datasheet.Cells(1, Sage_GL_LastCol + 4).Font.Bold = True

'Fill out Amount Column as the credit amount less the debit amount from the GL Dataset by looping through rows 2 to the last row in the data set and applying formula Column V - Column U rounded to two digits:


'Save Data to Manipulate into an array
GL_Data_Array = GL_Datasheet.Range(GL_Datasheet.Cells(2, Sage_GL_SourceJournal.Column), GL_Datasheet.Cells(Sage_GL_LastRow, Sage_GL_LastCol + 4)).Value


'Calculate the change in the liability account balance
For i = 1 To UBound(GL_Data_Array, 1)
    GL_Data_Array(i, 23) = WorksheetFunction.Round(GL_Data_Array(i, 20) - GL_Data_Array(i, 19), 2)
Next i

'Create Helper Lookup Key in the array
For i = 1 To UBound(GL_Data_Array, 1)
    If GL_Data_Array(i, 1) = "SO" Then
        ' Ensure each component of the tripple key is converted to string before concatenation
        GL_Data_Array(i, 25) = Format(CStr(GL_Data_Array(i, 2)), "000000") & "|" & Format(CStr(GL_Data_Array(i, 21)), "0000000") & "|" & Format(CStr(GL_Data_Array(i, 23)), "0.00")
    End If
Next i

'Write the Array Back to The Source Data
GL_Datasheet.Range(GL_Datasheet.Cells(2, Sage_GL_SourceJournal.Column), GL_Datasheet.Cells(Sage_GL_LastRow, Sage_GL_LastCol + 4)).Value = GL_Data_Array

'Clear Memory
Set GL_Data_Array = Nothing

'Create a lookup column header for a multi-factor lookup
AR_InvoiceHeader.Cells(1, Sage_AR_LastCol + 1).Value = "Tripple-Key"
AR_InvoiceHeader.Cells(1, Sage_AR_LastCol + 1).Font.Bold = True

'Create array of second data set
AR_Data_Array = AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(2, 1), AR_InvoiceHeader.Cells(Sage_AR_LastRow, Sage_AR_LastCol + 1)).Value


'Create Multi-Key in AR Data
For i = 1 To UBound(AR_Data_Array, 1)
AR_Data_Array(i, Sage_AR_LastCol + 1) = Format(CStr(AR_Data_Array(i, 22)), "000000") & "|" & CStr(AR_Data_Array(i, 8)) & "|" & Format(CStr(AR_Data_Array(i, 77) * 1), "0.00")
Next i



AR_InvoiceHeader.Range(AR_InvoiceHeader.Cells(2, 1), AR_InvoiceHeader.Cells(Sage_AR_LastRow, Sage_AR_LastCol + 1)).Value = AR_Data_Array



' Define Data Array for GL Data
GL_Data_Array = GL_Datasheet.Range(GL_Datasheet.Cells(2, Sage_GL_SourceJournal.Column), GL_Datasheet.Cells(Sage_GL_LastRow, Sage_GL_LastCol + 4)).Value

'If the Source Journal is GJ and the string Reclassify Invoice is present then set the document number to be the last 7 digits of the memo.
For i = 1 To UBound(GL_Data_Array, 1)
If GL_Data_Array(i, 1) = "GJ" And InStr(GL_Data_Array(i, 11), "Reclassify Invoice to") > 0 Then
    GL_Data_Array(i, 6) = Right(GL_Data_Array(i, 11), 7)
End If

'Check to see if there is a record classified as SO that does not have document number filled in and lookup the document number based on the multi-key
If GL_Data_Array(i, 1) = "SO" And GL_Data_Array(i, 6) = "" Then
GL_Data_Array(i, 6) = Application.WorksheetFunction.XLookup(GL_Data_Array(i, 25), AR_InvoiceHeader.Range("EI1:EI" & Sage_AR_LastRow), AR_InvoiceHeader.Range("A1:A" & Sage_AR_LastRow), 0, 0)
End If
Next i

'Write the Array back to the sheet
GL_Datasheet.Range(GL_Datasheet.Cells(2, Sage_GL_SourceJournal.Column), GL_Datasheet.Cells(Sage_GL_LastRow, Sage_GL_LastCol + 4)).Value = GL_Data_Array

'Clear Memory
Set GL_Data_Array = Nothing

'Define GL Data Array
GL_Data_Array = GL_Datasheet.Range(GL_Datasheet.Cells(2, Sage_GL_SourceJournal.Column), GL_Datasheet.Cells(Sage_GL_LastRow, Sage_GL_LastCol + 4)).Value

'If Transaction Type is GJ or SO, then look up the shipto state based on document number
For i = 1 To UBound(GL_Data_Array, 1)
If GL_Data_Array(i, 1) = "SO" Or (GL_Data_Array(i, 1) = "GJ" And InStr(GL_Data_Array(i, 11), "Reclassify Invoice to") > 0) Then
GL_Data_Array(i, 24) = "Invoice/Credit Memo"
End If

If GL_Data_Array(i, 1) = "SO" Or (GL_Data_Array(i, 1) = "GJ" And InStr(GL_Data_Array(i, 11), "Reclassify Invoice to") > 0) Then
    GL_Data_Array(i, 22) = Application.WorksheetFunction.XLookup(GL_Data_Array(i, 6), AR_InvoiceHeader.Range("A1:A" & Sage_AR_LastRow), AR_InvoiceHeader.Range("AQ1:AQ" & Sage_AR_LastRow), GetStateAbbreviationfromstring(CStr(GL_Data_Array(i, 11))), 0)
End If

If GL_Data_Array(i, 1) = "AP" Then
GL_Data_Array(i, 24) = "Payment"
 If GL_Data_Array(i, 1) = "AP" Then
        ' check if "TAX" exists in the string
        Dim taxPos As Long
        taxPos = InStr(GL_Data_Array(i, 11), "TAX")
        If taxPos > 0 Then
            ' Apply Trim and Mid functions to extract State
            GL_Data_Array(i, 22) = Trim(Mid(GL_Data_Array(i, 11), taxPos + 4, 3))
        End If
    End If
End If
Next i

GL_Datasheet.Range(GL_Datasheet.Cells(2, Sage_GL_SourceJournal.Column), GL_Datasheet.Cells(Sage_GL_LastRow, Sage_GL_LastCol + 4)).Value = GL_Data_Array
Set GL_Data_Array = Nothing


Dim LookupInvoiceNo As String



'Begins section to write GJE to reclassify invoices for states who have their own sales tax liability account

'Define an object to store the total invoice amount
Dim InvoiceTotal As Double

'Define a range object for the amount column created in the earlier loops
Dim Amount As Range

'Define a string object to contain the state value created in the earlier loops
Dim State As String

'Define a sheet object to write the GL Entry upload too:
Dim GL_Entry As Worksheet

'Define a long object to keep track/count the number of entries written to make sure entry lines are not being over-written
Dim Counter As Long

' Define a string to hold the account key for the debit line
Dim AccountKeySTP As String

' Define a string to hold the account key for the credit line
Dim AccountKey2 As String

'Define a string to hold the source journal
Dim SourceJournal As String

'Set the first account equal to the main sales tax payable account
AccountKeySTP = "243000000"

'Set the Amount Range variable to be the amount column created in the previous loops
Set Amount = GL_Datasheet.Range(GL_Datasheet.Cells(1, GL_Datasheet.Cells(1, Sage_GL_LastCol + 2).Column), GL_Datasheet.Cells(Sage_GL_LastRow, GL_Datasheet.Cells(, Sage_GL_LastCol + 2).Column))

' Set the GL_Entry worksheet variable to be a new worksheet added to the workbook
Set GL_Entry = Sheets.Add

'Rename the worksheet to be Entry
GL_Entry.Name = "Entry"

'Start a loop through each the GL Datasheet rows
For i = 2 To Sage_GL_LastRow

'Define invoice total the be the total amount for each row in the GL data related to a particular invoice number, e.g sum up all the debits and credits of every row pertaining to a particular invoice number and store that sum in the variable invoice total
InvoiceTotal = WorksheetFunction.Round(WorksheetFunction.SumIfs(Amount, Sage_GL_DocumentNo, GL_Datasheet.Cells(i, Sage_GL_DocumentNo.Column)), 2)

'Define State to be the value in the state column for the row being analyzed
On Error Resume Next
State = GL_Datasheet.Cells(i, Sage_GL_LastCol + 1).Value
'Define Source Journal to be the value in the SourceJournal column in the GL Data
SourceJournal = GL_Datasheet.Cells(i, Sage_GL_SourceJournal.Column).Value

'Define Counter as the number of filled in rows on the Entry worksheet
Counter = WorksheetFunction.CountA(GL_Entry.Range("A:A"))

'Check to see if no data has been entered on the entry sheet, if so Counter will be zero, and needs to be defined as 1
If Counter = 0 Then
Counter = Counter + 1
End If

' Check if the sum of the rows related to that invoice number is not zero, then check whether the state is etheir NY, NJ, CA, MN, ME,WV,ND,TN,KS,IA, or CO, and that the transaction type is not a sales tax payment.
If InvoiceTotal <> 0 And State = "NY" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "NJ" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "CA" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "MN" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "ME" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "WV" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "ND" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "IA" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "KS" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "TN" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "CO" And SourceJournal <> "AP" _
Or InvoiceTotal <> 0 And State = "KY" And SourceJournal <> "AP" _
Then

' If the transaction is an sales invoice, and related to one of those states, then check if counter is greater than 1 (or in other words if this is the first line of the journal entry).
If Counter > 1 Then
' If this isn't the first line of the journal entry then increase counter by 1 to reflect the next blank row on the entry sheet else do nothing
Counter = Counter + 1
End If

' on the Entry Sheet, with the row number being based on the value of counter, modify the value in column A to be GJ and the subsequent next row to be GJ
GL_Entry.Cells(Counter, 1).Value = "GJ"
GL_Entry.Cells(Counter + 1, 1).Value = "GJ"

' on the Entry Sheet, with the row number being based on the value of counter, modify the value in column B to be the date of the transaction in the GL Data and the subsequent next row to be the same date
GL_Entry.Cells(Counter, 2).Value = GL_Datasheet.Cells(i, Sage_GL_PostingDate.Column).Value
GL_Entry.Cells(Counter + 1, 2).Value = GL_Datasheet.Cells(i, Sage_GL_PostingDate.Column).Value

' Create a dictionary to map states to account keys
Dim StateAccountKeyMap As Object
Set StateAccountKeyMap = CreateObject("Scripting.Dictionary")


'Check what the state is, and depending on the state, define the value of accountkey2 to be the account key for the corresponding GL account that the accrued sales tax needs reclassified to
With StateAccountKeyMap
    .Add "NY", "9999900AH"
    .Add "NJ", "9999900AG"
    .Add "MN", "9999900AF"
    .Add "ME", "9999900AE"
    .Add "WV", "9999900BF"
    .Add "ND", "9999900BE"
    .Add "TN", "9999900AI"
    .Add "KS", "9999900AD"
    .Add "IA", "9999900AC"
    .Add "CA", "9999900AA"
    .Add "CO", "9999900BG"
    .Add "KY", "9999900BD"
End With

' Check if the state exists in the dictionary and retrieve the corresponding account key
If StateAccountKeyMap.Exists(State) Then
    AccountKey2 = StateAccountKeyMap(State)
Else
    'Handle case where state is not found in the dictionary, if necessary
 AccountKey2 = "243000000" '
End If

' Clean up
Set StateAccountKeyMap = Nothing

' on the Entry Sheet, with the row number being based on the value of counter, modify the value in column E to be the accountkeys1 and the subsequent next row to be the accountkey2 as defined by the previous logical expression
GL_Entry.Cells(Counter, 5).Value = AccountKeySTP
GL_Entry.Cells(Counter + 1, 5).Value = AccountKey2

' on the Entry Sheet, with the row number being based on the value of counter, modify the value in column F to be Reclassify Invoice to <state> Sales Tax Payable: <invoiceno> and the subsequent next row to be the same
GL_Entry.Cells(Counter, 6).Value = "Reclassify Invoice to " & State & " Sales Tax Payable: " & Format(GL_Datasheet.Cells(i, Sage_GL_DocumentNo.Column).Value, "0000000")
GL_Entry.Cells(Counter + 1, 6).Value = "Reclassify Invoice to " & State & " Sales Tax Payable: " & Format(GL_Datasheet.Cells(i, Sage_GL_DocumentNo.Column).Value, "0000000")

'Check whether the net impact of a particular invoice no in sales tax payable is a net debit or net credit to the account, the amount column is defined as credits minus debts, thus if a value is negative, its a net debit, if its positive a net credit.
If InvoiceTotal < 0 Then

'If the impact of the total amount related to the document number is a net debit, then set the value of column H for the line with accountkey1 to be the absolute value of the invoice total and the value in column G in the row with accountkey2 to be the absolute value of the invoice total (Credit Sales Tax Payable Debit Sales Tax Payable for a specific state the move the debit balance)
GL_Entry.Cells(Counter, 8).Value = Abs(InvoiceTotal)
GL_Entry.Cells(Counter + 1, 7).Value = Abs(InvoiceTotal)

'If the impact of invoice total is a net credit, then do the opposite, setting column G for the row with accountkey1 to the absolute value of the invoicetotal and the value of the accountkey2 row, column H to be the absolutevalue of the invocie total
ElseIf InvoiceTotal > 0 Then
GL_Entry.Cells(Counter, 7).Value = Abs(InvoiceTotal)
GL_Entry.Cells(Counter + 1, 8).Value = Abs(InvoiceTotal)

End If
End If
'Evalulate the next row
Next i

Call Create_GL_Pivot
Set GL_Data_Array = Nothing
Set AR_Data_Array = Nothing



End Sub

Function GetStateAbbreviationfromstring(inputString As String) As String
Dim stateMapping As Object
Dim key As Variant
Dim words() As String
Dim subWords() As String
Dim i As Integer, j As Integer
Dim delimiters As Variant
Dim delim As Variant
Dim abbrev As Variant

' Initialize the state mapping
Set stateMapping = CreateObject("Scripting.Dictionary")

' Add states and their abbreviations to the mapping
With stateMapping
.Add "Alabama", "AL"
.Add "Alaska", "AK"
.Add "Arizona", "AZ"
.Add "Arkansas", "AR"
.Add "California", "CA"
.Add "Colorado", "CO"
.Add "Connecticut", "CT"
.Add "Delaware", "DE"
.Add "Florida", "FL"
.Add "Georgia", "GA"
.Add "Hawaii", "HI"
.Add "Idaho", "ID"
.Add "Illinois", "IL"
.Add "Indiana", "IN"
.Add "Iowa", "IA"
.Add "Kansas", "KS"
.Add "Kentucky", "KY"
.Add "Louisiana", "LA"
.Add "Maine", "ME"
.Add "Maryland", "MD"
.Add "Massachusetts", "MA"
.Add "Michigan", "MI"
.Add "Minnesota", "MN"
.Add "Mississippi", "MS"
.Add "Missouri", "MO"
.Add "Montana", "MT"
.Add "Nebraska", "NE"
.Add "Nevada", "NV"
.Add "New Hampshire", "NH"
.Add "New Jersey", "NJ"
.Add "New Mexico", "NM"
.Add "New York", "NY"
.Add "North Carolina", "NC"
.Add "North Dakota", "ND"
.Add "Ohio", "OH"
.Add "Oklahoma", "OK"
.Add "Oregon", "OR"
.Add "Pennsylvania", "PA"
.Add "Rhode Island", "RI"
.Add "South Carolina", "SC"
.Add "South Dakota", "SD"
.Add "Tennessee", "TN"
.Add "Texas", "TX"
.Add "Utah", "UT"
.Add "Vermont", "VT"
.Add "Virginia", "VA"
.Add "Washington", "WA"
.Add "West Virginia", "WV"
.Add "Wisconsin", "WI"
.Add "Wyoming", "WY"
.Add "District of Columbia", "DC"
End With

    ' Clean the input string
    inputString = Trim(inputString)
    
    ' Replace multiple spaces with a single space
    Do While InStr(inputString, "  ") > 0
        inputString = Replace(inputString, "  ", " ")
    Loop

    ' Check for explicit matches for abbreviations
    For Each abbrev In stateMapping.Items
        If Left(inputString, Len(abbrev)) = abbrev Or _
           InStr(inputString, " " & abbrev & " ") > 0 Or _
           Right(inputString, Len(abbrev)) = abbrev Then
            GetStateAbbreviationfromstring = abbrev
            Exit Function
        End If
    Next abbrev

    ' Check for explicit matches for full state names
    For Each key In stateMapping.Keys
        If InStr(inputString, key) > 0 Then
            GetStateAbbreviationfromstring = stateMapping(key)
            Exit Function
        End If
    Next key

    ' If no match found, return an empty string
    GetStateAbbreviationfromstring = ""
End Function

Sub Create_GL_Pivot()

Dim GLDetail As PivotCache
Dim GLBook As Workbook
Dim GL_Pivot As PivotTable
Dim PivotSheet As Worksheet
Dim GL_Detail_Range As Range

Dim PostDate As PivotField
Dim State As PivotField
Dim Amount As PivotField
Dim Trn_Type As PivotField



Set GLBook = ActiveWorkbook

Set PivotSheet = GLBook.Sheets.Add
PivotSheet.Name = "Pivot"

Set GL_Detail_Range = GL_Datasheet.UsedRange

Set GLDetail = GLBook.PivotCaches.Create( _
        SourceType:=xlDatabase, _
        SourceData:=GL_Detail_Range)

Set GL_Pivot = GLDetail.CreatePivotTable( _
    TableDestination:=PivotSheet.Range("A5"), _
    tableName:="GL_Details")
    
    
Set State = GL_Pivot.PivotFields("State")
Set Amount = GL_Pivot.PivotFields("Amount")
Set Trn_Type = GL_Pivot.PivotFields("Type")
Set PostDate = GL_Pivot.PivotFields("PostingDate")

PostDate.Group start:=True, End:=True, Periods:=Array(False, False, False, False, True, False, False)

State.Orientation = xlRowField
Trn_Type.Orientation = xlRowField
GL_Pivot.AddDataField Amount, "Tax Amount", xlSum
PostDate.Orientation = xlColumnField

End Sub
